PPxCFG  = 
;---------------------------------------------------------------------------
;/ KC_main/ XC_dset/
;/ S_git-dir/ S_git-status/ S_git-log/ S_git-commit
;/ K_gitmapC/ K_gitmapCstatus/ K_gitmapClog/ K_gitmapCcommit/ K_gitmapV/ K_gitmapE
;/ M_git/ M_gitSub1/ M_gitSub2/ M_git-status.EX / M_gitAUX
;---------------------------------------------------------------------------
; PPc key
;---------------------------------------------------------------------------
KC_main = {
; G         , *script %'scr'%\git_main.js,menu
^G        , *ifmatch !0,0%si"RootPath" %: *script %'scr'%\git_main.js,quit %: *stop
            *script %'scr'%\git_main.js,dir
}
;---------------------------------------------------------------------------
; aux
;---------------------------------------------------------------------------
XC_dset ={
aux:S_git-dir\    = B111110000000000000010,-1,-1,22,0,-1,B011111,B00000000000000000000000001,cmd:"*setcust X_bg:P_%n=%*getcust(X_save)%\bg_git_bla.png %: *setcust X_bg:T_%n=30 %: *color back %: *mapkey use,K_gitmapCdir"
aux:S_git-status\ = B111110000000000000010,-1,-1,19,-1,-1,B000000,B00000000000000000000000001,cmd:"*viewstyle -thispath gitstatus %: *setcust X_bg:P_%n=%*getcust(X_save)%\bg_git_bla.png %: *setcust X_bg:T_%n=30 %: *color back %: *mapkey use,K_gitmapC %: *mapkey use,K_gitmapCstatus"
aux:S_git-log\    = B111110000000000000010,-1,-1,19,-1,-1,B000000,B00000000000000000000000001,cmd:"*viewstyle - thispath gitlog %: *setcust X_bg:P_%n=%*getcust(X_save)%\bg_git_bla.png %: *setcust X_bg:T_%n=30 %: *color back %: *mapkey use,K_gitmapC %: *mapkey use,K_gitmapClog"
aux:S_git-commit\ = B111110000000000000010,-1,-1,19,-1,-1,B000000,B00000000000000000000000001,cmd:"*viewstyle - thispath gitcommit %: *color back %: *mapkey use,K_gitmapC %: *mapkey use,K_gitmapCcommit"
}

-|S_git-dir =
S_git-dir = {
base    = aux:S_git-dir\ %; local:\path
setRoot = *execute %n,*string i,RootPath=aux:S_git-dir\%%si"gitRoot" %:
list    = %*setRoot %*path
overup  = *string i,NewPath=%*regexp("%*name(D,"%FD")","/^aux:S_git-dir\\//") %: *mapkey delete,K_gitmapCdir
leave   = *mapkey delete,K_gitmapCdir
get     = %Oa copy "%*path%\%*src" "%*dest"
store   = %Oa copy "%*src" "%*path%\%*dest"
          *cd %*path %: git add "%*path\%*dest"
store-m = %Oa move "%*src" "%*path%\%*dest"
          *cd %*path %: git add "%*path\%*dest"
rename  = %Oa *cd %*name(D,"%*path") %: git mv -k %*name(C,"%*path") "%*dest"
del     = %Oa *cd %*name(D,"%*path") %: git rm --cached "%*path"
deldir  = %Oa *cd %*name(D,"%*path") %: git rm -r --cached "%*path"
move    = %Oa *cd %*path %: git mv -k "%*src" %*name(DCP,%*dest)
}

-|S_git-status =
S_git-status = {
base    = aux:S_git-status\ %; path\repository
lf      = _gitstatus.xgit
setRoot = *execute %n,*string i,RootPath=aux:S_git-status\%%si"gitRoot" %:
list    = %*setRoot %*lf
overup  = *string i,NewPath=aux:S_git-dir\%si"gitRoot" %: *mapkey delete,K_gitmapC %: *mapkey delete,K_gitmapCstatus
leave   = *mapkey delete,K_gitmapC %: *mapkey delete,K_gitmapCstatus
}

-|S_git-log =
S_git-log = {
base    = aux:S_git-log\ %; path\repository
lf      = _gitlog.xgit
setRoot = *execute %n,*string i,RootPath=aux:S_git-log\%%si"gitRoot" %:
list    = %*setRoot %*lf
overup  = *string i,NewPath=aux:S_git-dir\%si"gitRoot" %: *mapkey delete,K_gitmapC %: *mapkey delete,K_gitmapClog
leave   = *mapkey delete,K_gitmapC %: *mapkey delete,K_gitmapClog
}

-|S_git-commit =
S_git-commit = {
base    = aux:S_git-commit\ %; path\repository
lf      = _gitlog_commit.xgit
setRoot = *execute %n,*string i,RootPath=aux:S_git-commit\%%si"gitRoot" %:
list    = %*setRoot %*lf
overup  = *string i,NewPath=aux:S_git-log\%si"gitRoot" %: *mapkey delete,K_gitmapC %: *mapkey delete,K_gitmapCcommit
leave   = *string i,commithash= %: *mapkey delete,K_gitmapC %: *mapkey delete,K_gitmapCcommit
}

;---------------------------------------------------------------------------
; keys
;---------------------------------------------------------------------------
-|K_gitmapCdir =
K_gitmapCdir = {
E       , *string o,mc=%*js(PPx.Result = PPx.EntryMarkCount;)
          *string o,path=%*regexp("%FD","/^aux:S_git\-dir\\//")
          *if 4<=%so"mc" %: %"確認"%Q"%so"mc"エントリがマークされています%bn続行しますか？"
          *run -max -d:%so"path" %g'gvim' --remote-tab-silent %*name(C,"%FC")
G       , *ifmatch 0,0%si"gitRoot" %: *script %'scr'%\git_main.js,menu %: *stop
          *cd %si"gitRoot" %: %M_gitAUX,g
N       , *string o,path=%*regexp("%FDC","/^aux:S_git\-dir\\//")
          *ppv %so"path"
^Q      , *postmessage %*findwindowclass("ConsoleWindowClass"),258,81,0 ;^@ PPbにQのキーコードを送る
Y       = @null
}
-|K_gitmapC =
K_gitmapC = {
\SPACE  , %K"@\SPACE %: *stop !0%NVG %: *execute VG, *jumpline 0 %%: *find "%*js(PPx.Result=PPx.Entry.Name)"
SPACE   , %K"@SPACE %: *stop !0%NVG %: *execute VG, *jumpline 0 %%: *find "%*js(PPx.Result=PPx.Entry.Name)"
TAB     , *if 0%NVG %: *focus #%NVG %: *stop
          *execute ,%*getcust(KC_main:TAB)
F12     , %K"@null"
F5      , *string i,gitRoot=
          *string o,order=%*regexp("%si"RootPath"","/aux:S_git-([^\\]*).*/$1/")
          *ifmatch /status|log/,%so"order" %: *script %'scr'%\git_main.js,%so"order" %: *stop
          *execute ,%*getcust(KC_main:\F5)
\F5     , *clearchange
C       = @null
E       , *string o,mc=%*js(PPx.Result = PPx.EntryMarkCount;)
          *if 4<=%so"mc" %: %"確認"%Q"%so"mc"エントリがマークされています%bn続行しますか？"
          *run -max -d:"%FD" %g'gvim' --remote-tab-silent "%*name(C,"%FC")"
G       , *ifmatch 0,0%si"gitRoot" %: *script %'scr'%\git_main.js,menu %: *stop
          *cd %si"gitRoot" %: %M_gitAUX,g
J       , %K"@DOWN" %: *stop !0%NVG %: *execute VG,*jumpline 0 %%: *find "%*js(PPx.Result=PPx.Entry.Name)"
\J      , *ifmatch !0,0%si"ppvdiff" %: *stop !0%NVG %: %KVG"@DOWN" %: *stop
          *execute ,%*getcust(KC_main:\J)
K       , %K"@UP" %: *stop 0==0%NVG %: *execute VG,*jumpline 0 %%: *find "%*js(PPx.Result=PPx.Entry.Name)"
\K      , *ifmatch !0,0%si"ppvdiff" %: *stop 0==0%NVG %: %KVG"@UP" %: *stop
          *execute ,%*getcust(KC_main:\K)
M       = @null
Q       , *if 0%NVG %: *string i,ppvdiff= %: *closeppx VG %: *stop
          *execute ,%*getcust(KC_main:Q)
^Q      , *signal ba,killone
^W      , *string o,xlf="%'list'%\PPXGREP.XLF"
          *string o,cmd=gitgrep
          %Oi *script %'scr'%\cmdGrep.js,%so"xlf",%so"cmd",LF
          *ifmatch %si"output",LF %: *ppc -r -single -mps -bootid:W %so"xlf" -k *viewstyle -temp &GREP
          *string i,output= %: *string i,selecthash=
Y       , *setcust X_vpos=0
          *string o,en=%*js(PPx.Result=PPx.Entry.Name;)
          *ifmatch 0,0%so"en" %: *stop
          *if !0%si"ppvdiff" %: *string i,ppvdiff=1 %: %Oa *ppv -r -utf8 -esc:on -bootid:G %si"diffpatch" -k *jumpline 0 %%: *find "%so"en"" %%: *mapkey use,K_gitmapV %: *stop
          *string i,ppvdiff= %: *closeppx VG
}
-|K_gitmapCstatus =
K_gitmapCstatus = {
ENTER   , *ifmatch "M ","%*js(PPx.Result=PPx.Entry.Comment)" %: *string o,cr=HEAD
          %Ox gvim "+Gitdiff %so"cr" %R" %R
; ENTER   , *ifmatch 0,0%*js(PPx.Result=PPx.Entry.Name;) %: *stop
;           *ifmatch "M ","%*js(PPx.Result=PPx.Entry.Comment)" %: *string o,cr=HEAD
;           %Ox gvim "+Gitdiff %so"cr" %R" %R
^V_H32  = @null
D       , *string o,delFile=%*RESULT(lfnames)
          %"git rm cached" %Q"%*regexp("%so"delFile"","s/\s/\n/g") %: *run -d:%si"gitRoot" git rm --cached -r %so"delFile" %&
          *script %'scr'%\gitChangeState.js,2,2
R       , *string o,name=%*regexp(%Y.%t,"/\.$//")
          *string o,rename=%*input("%so"name"" -title:"git mv <名前の変更>" -mode:Ec -select:fs -k *script %'scr'%\setSel.js,"(.*\/(?!$))([^\.]*)")
          %Oa git mv %so"name" %so"rename" %&
          *js "PPx.EntryState=1; PPx.EntryInsert(PPx.EntryIndex+1,""%so"rename""")";"
}
-|K_gitmapClog =
K_gitmapClog = {
ENTER   , *string o,name=%*regexp(%Y.%t,"/\.$//")
          *ifmatch 0,0%so"name" %: *stop
          *script %'scr'%\git_main.js,log,%so"name"
^V_H33  = @null
\F5     , %K"@F5"
E       = @null
J       , *execute ,%*getcust(KC_main:J)
\J      , *execute ,%*getcust(KC_main:\J)
K       , *execute ,%*getcust(KC_main:K)
\K      , *execute ,%*getcust(KC_main:\K)
Y       , *string o,name=%*regexp(%Y.%t,"/\.$//")
          *ifmatch 0,0%so"name" %: *stop
          *signal ba,killone
          *execute ba,*cd %si"gitRoot" %%: git -P log -n1 --stat --color %so"name"
          ; *ifmatch !0,0%*js(PPx.Result=PPx.ComboIdName) %: *string o,sf=#
          ; *execute ,%%KC%so"sf""@WBOTTOM
}
-|K_gitmapCcommit =
K_gitmapCcommit = {
ENTER , %Ox gvim "+Gitdiff %si"commithash" %R" %R
}
-|K_gitmapV =
K_gitmapV = {
TAB   , *focus %sp"targetID"
^TAB  , *string o,ppe=%*findwindowclass(PPeditW)
        *if %so"ppe" %: *focus #%so"ppe" %: *stop
        *execute ,%*getcust(KV_main:^TAB)
ESC   , *setcust X_vpos=0
        *execute C,*string i,ppvdiff=
        %K"@Q"
^J    , *execute C,*cursor 0,1 %: *string o,searchpath=%*regexp(%*extract(C,"%%Y.%%t"),"/\.$//")
        *jumpline 0 %: *find "%so"searchpath""
^K    , *execute C,*cursor 0,-1 %: *string o,searchpath=%*regexp(%*extract(C,"%%Y.%%t"),"/\.$//")
        *jumpline 0 %: *find "%so"searchpath""
Q     , *setcust X_vpos=0
        *execute C,*string i,ppvdiff=
        %K"@Q"
Y     , *setcust X_vpos=0
        *execute C,*string i,ppvdiff=
        %K"@Q"
}
-|K_gitmapE =
K_gitmapE = {
ESC   , *focus %sp"targetID" %: *completelist -close %: %k"@ESC"
^TAB  , *launch c:\bin\cltc\cltc.exe
^S    , %M_gitSave,C
}

;---------------------------------------------------------------------------
; menu
;---------------------------------------------------------------------------
-|M_gitSub1 =
M_gitSub1 = {
&G:git <CMD>  = *string o,cmd=%*input(-title:"git.." -mode:e -k *completelist -file:%'list'%\GITCOMMAND.TXT)
                *PPBWT %: %Oq *execute ba,*cd %si"gitRoot" %%: git %so"cmd"
&V:vimdiff    = %Ox gvim "+Gitdiff %*input("HEAD~" -title:":Gitdiff コミットの選択" -mode:e) %R" %R
}
-|M_gitSub2 =
M_gitSub2 = {
-- =
&B:checkout branch      = %Oq *run -noppb -d:%si"gitRoot" -pos:360,200 ppbw -c nyagos -c mode 60,20&lua_f "%'myrepo'%\ppx\lua\git_checkout.lua" %0%\
&B:checkout -b branch   = *string o,nb=%*input(-title:"git checkout -b.." -mode:e)
                          *PPBWT %: *signal ba,killone %: %Oq *execute ba,*cd %si"gitRoot" %%: git checkout -b %so"nb"
                          *string i,uBranch=%so"nb" %: %K"@SCROLL"
-- =
&1:git-dir    = *script %'scr'%\git_main.js,dir
&2:git-status = *script %'scr'%\git_main.js,status
&3:git-log    = *script %'scr'%\git_main.js,log
}
-|M_git-status.EX =
M_git-status.EX = {
&A:add -v %%#FC         = git add -v %*RESULT(lfnames) %&
                          *script %'scr'%\gitChangeState.js,1,5
&P:add -p -v %%#FC      = %Oq *execute ba,*focus %%n %%: git add -p -v %#FC %%&
                          *script %'scr'%\gitChangeState.js,3,4
&U:restore -S %%#FC     = git restore -S %*RESULT(lfnames) %&
                          *script %'scr'%\gitChangeState.js,0,13
&W:restore -S -W %%#FC  = %"git resotre --staged --worktree"%Q"選択したエントリをコミット後の状態に戻します"
                          git restore -S -W %*RESULT(lfnames) %&
                          *js "PPx.Entry.Hide"
                          ; *script %'scr'%\gitChangeState.js,0,2
-- =
&F:commit --fixup = %Oq *run -noppb -d:%si"gitRoot" -pos:360,200 ppbw -c nyagos -c mode 60,20&lua_f "%'myrepo'%\ppx\lua\git_string.lua" %0%\ commit %&
                    *execute ba,git commit --fixup=%si"git_string" %%: *string i,git_string=
                    %k"F5"
}

-|M_git =
M_git = {
ex1 = ??M_gitSub1
-- =
&I:git-init   = %"git init?"%Q"リポジトリの初期化、作成"
                *string o,nameRepo=%*input("" -title:"git init..[名称の入力]" -mode:e)
                %Obd *run -wait:later git init %so"nameRepo" >nul %: *wait -run %: *run -d:"%so'nameRepo'" git commit --allow-empty -m ":tada:Initial Commit" >nul %: *string i,gitRoot=
&C:git-clone <clipbord> <path>  = %"git clone?"%Q"%*clippedtext()" %:
                                  %Obd git clone %*clippedtext() %*input("" -title:"リポジトリ名" -mode:d -select:l) >nul
&C:gist-clone <clipbord> <path> = *string o,path=%*regexp("%*clippedtext","s/.*?([0-9a-z]{32})(.*)?/git@gist.github.com:$1/")
                                  %"gist clone?"%Q"%so"path""
                                  %Obd git clone %so"path" %*input("" -title:"リポジトリ名" -mode:d -select:l) >nul
ex2 =
}
-|M_gitAUX =
M_gitAUX = {
ex1 = ??M_gitSub1
-- =
ex3 = ??auxEX
&E:commit PPe = *string o,ppe=%*findwindowclass(PPeditW)
                *if 0%so"ppe" %: *ifmatch %n,%sp"targetID" %: *focus #%so"ppe" %: *stop
                *ppe %'list'%\git\commit_template -k *editmode -modify:silent %%: *completelist -module:off -file:%'list'%\commit_comp.txt %%: *mapkey use,K_gitmapE %%: *string e,commit=1 %%: *string e,filename=%si"gitRoot"%\.git\COMMIT_EDITMSG
&C:commit --amend --no-edit       = @git log -1 | %0ppbw -c %(%"git commit --amend --no-edit"%Q"このコミットを上書きします%bn%bn%*stdin(-utf8)" %: *execute ba,git commit --amend --no-edit %%: %%k"F5"%)
&C:commit %%#FC --amend --no-edit = @git log -1 | %0ppbw -c %%"git commit %FC --amend --no-edit"%%Q"このコミットにマークしたエントリを追加します%%bn%%bn%%*stdin(-utf8)" %%: *execute ba,git commit "%#FC" --amend --no-edit %%%%: %%%%k"F5"
&R:reset --soft HEAD^             = @git log -1 | %0ppbw -c %(%"git reset --soft HEAD~"%Q"このコミットを削除します%bn%bn%*stdin(-utf8)" %: *execute ba,git reset --soft HEAD~ %%: %%k"F5"%)
&R:rebase -i --autosquash   = *string o,order=%*regexp("%si"RootPath"","/aux:S_git-([^\\]*).*/$1/")
                              *ifmatch log,%so"order" %: *string o,hash=%*js("PPx.Result=PPx.Entry.Name;")
                              *string o,sq=%*input("%so"hash"" -title:"git rebase -i   ※rebaseを実行するコミットを選択")
                              *execute ba,*focus %%n %%: git rebase -i %so"sq" %%: *stop %%*exitcode %%: *string i,selecthash= %%: *focus %%: %%k"F5"
-- =
&S:stash save               = *string o,cmnt=%*input(-title:"git stash comment")
                              *string o,brnc=%si"uBranch"
                              *execute ba,git rev-parse --short %so"brnc" | xargs -I {} git stash save -u {} "%so'cmnt'" %%&
                              *execute %n,*js "for(let i=PPx.EntryDisplayCount;i--;){PPx.Entry.Hide}"
                              *color back
&S:stash save --keep-index  = *string o,cmnt=%*input(-title:"git stash comment")
                              *string o,brnc=%si"uBranch"
                              *execute ba,git rev-parse --short %so"brnc" | xargs -I {} git stash save -k {} "%so'cmnt'" %%&
                              *execute %n,*js "for(let i=PPx.EntryDisplayCount;i--;){PPx.Entry.Hide}"
                              *color back
&S:stash apply              = %Oq *run -noppb -d:%si"gitRoot" -pos:360,200 ppbw -c nyagos -c mode 60,20&lua_f "%'myrepo'%\ppx\lua\git_stash.lua" %&
                              *script %'scr'%\git_main.js,status
&S:stash apply --index      = %Oq *run -noppb -d:%si"gitRoot" -pos:360,200 ppbw -c nyagos -c mode 60,20&lua_f "%'myrepo'%\ppx\lua\git_stash.lua" "--index" %&
                              *script %'scr'%\git_main.js,status
ex2 = ??M_gitSub2
}

-|M_gitSave =
M_gitSave = {
&C:commit -F _EDITMSG         = *gitmodePPeCommit "git commit -F %se'filename' --cleanup=strip >nul"
&C:commit %%#FC -F _EDITMSG   = *gitmodePPeCommit "git commit %%*RESULT(lfnames) -F %se"filename" --cleanup=strip >nul"
&A:commit --amend -F _EDITMSG = *gitmodePPeCommit "git commit --amend -F %se"filename" --cleanup=strip >nul"
&A:commit %%#FC --amend -F _EDITMSG = *gitmodePPeCommit "git commit %%*RESULT(lfnames) --amend -F %se"filename" --cleanup=strip >nul"
}

_Command = {
gitmodePPeCommit  = %K"@^s"
                    *if 0%NVG %: %KVG"WBOTTOM"
                    *signal ba,killone
                    *string o,gr=%*extract(C,"%%si'gitRoot'")
                    *ifmatch !%*substring("%se'holdRoot'",3),%*substring("%so'gr'",3) %: %I"対象と異なるリポジトリを参照しています。%bnPPe: %se'holdRoot'%bnPPc: %so'gr'" %: *stop
                    *execute C,*cd %%si"gitRoot" %%: *execute ba,%*arg(1) %%%%: git --no-pager log -n1 --stat --summary %%%%: *wait 100,1 %%: *focus %%n %%: %%k"F5"
}
