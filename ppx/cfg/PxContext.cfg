PPxCFG  = 
;---------------------------------------------------------------------------
;@desc ポップアップメニュー
;@table M_Ccr, M_Unone, M_Udir, M_Uimg, M_Uimg1, M_Uarc, M_Carc, M_Caux,
; M_Clist, M_Chttp, M_DirMenu, M_FileRename, M_bin, M_xunpack, M_xpack, 
; M_ppcv, M_editcMenu, M_editc, M_editci, M_editciRename
;---------------------------------------------------------------------------
;** Apps共通
;---------------------------------------------------------------------------
-|M_Ccr =
M_Ccr = {
Ext =
マークパス書き出し(&L)  = *script %'scr'%\LFwrite.js,new,%*input("|%1|%\marklist.sz7" -title:"パスの設定" -select:i)
-- =
リネーム(&R)  = ?M_ppmRename
コメント  &[  = ?M_menuCTool1
属性(&A)      = %K"@A"
-- =
圧縮(&P)      = ?M_xpack
-- =
移動(&M)      = ?M_ppmMove
コピー(&C)    = ?M_ppmCopy
削除(&D)      = ?M_ppmDelete
-- =
; サムネイル256(&T)   = %Ons ralpha /ini=thumb256.ini %FD%\%R
;                       %Oi *ppc -bootid:T -single -sps -min -k *jumppath %FD -entry:%R
;                       *wait 100,1
;                       %Oi *execute CT,*setentryimage "c:\bin\temp\thumb.jpg" /save
;                       *closeppx CT
;                       *delete "c:\bin\temp\thumb.jpg"
サムネ設定(&T)  = %Obd %0ppcw.exe -single -bootid:t -choose:con8,%%*regexp(%%FD\%%R,s/\\/\\\\/g) | xargs -I {} %0ppcw.exe -r -k *viewstyle -temp "サムネ小(&J)" %%: *setentryimage {} -save %%: *zoom +0
サムネ削除(&T)  = *if 9==%*js(PPx.Result = PPx.DirectoryType;) %: *delete "%C" %: *stop
                  *delete "%C:thumbnail.jpg"
                  *zoom +0
--  =
プロパティ(&I)  = %K"@&ENTER"
}
;---------------------------------------------------------------------------
;** Apps振り分けなし
;---------------------------------------------------------------------------
-|M_Unone =
M_Unone = {
; 移動形式 = ??exjumpmenu
; -- =
テキスト変換(&X) = ?M_Udoc
}
;---------------------------------------------------------------------------
;** Appsディレクトリ
;---------------------------------------------------------------------------
-|M_Udir =
M_UDir = {
ディレクトリ内検索(&W)  = *where -path:"%#;FC" -listfile:"%*temp(where.xlf)"
; テキスト置換(&S)      = %0..\spe5d\Speeeeed.exe %#FDC
--  =
画像変換(&R)  =?M_Uimg1
--  =
;&MassiGra     = viewer /newwnd %FDC
;--  =
}
;---------------------------------------------------------------------------
;** Apps画像
;---------------------------------------------------------------------------
-|M_Uimg =
M_Uimg = {
移動形式        = ??exjumpmenu
-- =
; &AzPaiter       = *AHK AzPainter2.ahk %FDC
; &EDGE           = *AHK EDGE.ahk %FDC
背景に設定(&B)  = *setcust X_bg:Path=%FDC
                  *setcust X_bg:Type=20
                  *color back
-- =
画像変換(&R)    = ??M_Uimg1
-- =
}
-|M_Uimg1 =
M_Uimg1 = {
; &Ec        = %Oxi %0..\ec150\EC.exe
;              *autodragdrop #%*findwindowclass("TMainForm"),%FDC
&Ralpha     = %Oi *launch %'ralpha'
              *autodragdrop "Ralpha Image Resizer",%FDC
&RalphaCMD  = *string o,inipath=%*name(C,"%*input("c:\bin\ralpha\ini\" -title:"設定ファイルの選択" -mode:g -select:l -k:*completelist)")
              ralpha /ini=%so"inipath" %#FDC
}
;---------------------------------------------------------------------------
;** Appsテキスト形式
;---------------------------------------------------------------------------
; -|M_Udoc =
; M_Udoc = {
; 文字列置換(&R)  = *if 4==%*js(PPx.Result=PPx.DirectoryType;) %: *script %'scr'%\LFexec.js,sed,1 %: *stop
                  ; %On *ppb -c sed -i_back -r "s#%*script(%'scr'%\compcode.js,"iX","""%%","[検索文字#置換文字] ※\=\\\\")#g" %#FDC
; -- =
; 文字コード変換: &SJIS(CRLF)    = %On *PPb -c nkf -s -Lw -c -x --no-best-fit-chars --overwrite %#FDC
; 文字コード変換: &UTF16LE       = %On *PPb -c nkf -w16L -x --no-best-fit-chars --overwrite %#FDC
; 文字コード変換: UTF&8(LF)      = %On *PPb -c nkf -w -Lu -d --overwrite %#FDC
; 文字コード変換: UTF8&BOM(LF)   = %On *PPb -c nkf -w8 -Lu -d --overwrite %#FDC
; }
;---------------------------------------------------------------------------
;** Apps書庫
;---------------------------------------------------------------------------
-|M_Uarc  =
M_Uarc = {
書庫内検索(&W)  = *where -path:"%R" -vfs -listfile:"%*temp(where.xlf)"
-- =
移動形式(&Y)    = ??exjumpmenu
-- =
;&MassiGra       = viewer %FDC
;-- =
解凍(&U)        =?M_xunpack
}
;---------------------------------------------------------------------------
;** エコメニュー
;---------------------------------------------------------------------------
; -|M_Ueco =
; M_Ueco ={
; &1:TagSys     = *string o,basepath=%'list'%\tag\
                ; *ifmatch "o:e,a:d-",01_TAG.TXT %: *string o,basepath=01_TAG.TXT
                ; *string o,listpath=%*input("%so'basepath'" -title:"Select Taglist.." -k *completelist)
                ; *script %'scr'%\tagMakeMenu.js,%so"listpath"
; -- =
; ex = ??M_UecoSub
; }
;---------------------------------------------------------------------------
;** アーカイブ内
;---------------------------------------------------------------------------
-|M_Carc =
M_Carc = {
下層を開く(&O)  = %K"C_DIR"
-- =
ワークスペースに解凍(&U)    = *unpack %*getcust(S_ppm#user:work)
ディレクトリにまとめる(&U)  = *unpack %*RESULT(getpath)UNPACK
-- =
名前の変更(&R)  = %On *ppb -c reces /mn%C:%*input("%*regexp("%FC","s/(.*\\)(.*)/$1|$2|/")" -title:"書庫内ファイル名の変更" -mode:Ec -select:i) %FD %&%K"@^F5" %: *stop
移動(&M)        = %*menu(M_ppmMove,!D)
コピー(&C)      = %*menu(M_ppmCopy,!D)
削除(&D)        = %*menu(M_ppmDelete,!C)
}
;---------------------------------------------------------------------------
;** AUX
;---------------------------------------------------------------------------
-|M_Caux =
M_Caux = {
コピー(&C)  = %*menu(M_ppmCopy,!C)
移動(&M)    = %*menu(M_ppmMove,!M)
削除(&D)    = %K"@\D"
-- =
マークパス書き出し(&L)  = *script %'scr'%\LFwrite.js,new,%*getcust(S_ppm#user:work)%\marklist.sz7
}
;--------------------------------------------------------------------
;** リストファイル内
;---------------------------------------------------------------------------
-|M_Clist =
M_Clist = {
該当ディレクトリ(&J)  = *jumppath %FC /entry
-- =
Ext =
リンク切れ抽出(&N)    = *script %*getcust(S_ppm#plugins:ppm-listfile)\script\%*getcust(S_ppm#global:scripttype)\lf_mark_notexist.js
リストから消去(&D)    = %K"@^\D"
-- =
;リネーム :&Allrename  = %Oi %0..\allrename\allrename.exe /file
;                        %K"null"
;                        *autodragdrop "AllRename"
メモ(&E)  = *MEMO
; 赤(&R)    = *MEMO 8
; 緑(&G)    = *MEMO 1
; 青(&B)    = *MEMO 10
-- =
移動(&M)        = %*menu(M_ppmMove,!M)
コピー(&C)      = %*menu(M_ppmCopy,!C)
実体削除(&D)    = %*menu(M_ppmDelete,!R)
-- =
マークパス書き出し(&L)  = *script %'scr'%\LFwrite.js,new,%*getcust(S_ppm#user:work)%\marklist.sz7
}
;---------------------------------------------------------------------------
;** HTTP
;---------------------------------------------------------------------------
-|M_Chttp =
; M_Chttp = {
; }
;---------------------------------------------------------------------------
;** ディレクトリメニュー
;---------------------------------------------------------------------------
-|M_DirMenu =
M_DirMenu = {
ディレクトリ検索(&W)  = *where -vfs -listfile:"%*temp(where.xlf)"
-- =
エントリ作成(&N)  = ?newmenu
-- =
表示(&V)          = ?viewmenu
ソート(&S)        = ?sortmenu
-- =
ローカル(&L)      = ?drivemenu
-- =
キャッシュON(&E)  = *cache on
                    %K"@F5"
〃        OFF(&E) = *cache off
--  = 
; &DFで開く         = *launch %0..\DF\DF.EXE %DCA -w%DCB
; -- =
パス限定背景(&B)  = %Obd %0ppcw.exe -single -bootid:t -choose:con8,%%*regexp("%%FD\%%R",/\\/\\\\/g) | xargs -I {} %0ppcw.exe -r -k *diroption -thisbranch cmd "*setcust X_bg:T_%%%%n=20 %%%%: *setcust X_bg:P_%%%%n={} %%%%: *color back" %%: *jumppath -savelocate -entry:"%R" -refreshcache
--  = 
全体背景解除(&Q)  = *setcust X_bg:Path=
                    *setcust X_bg:Type=0
                    *color back"
; 全体背景解除(&Q)  = *string o,dset=%*js("PPx.result=PPx.Extract('%%*getcust(XC_dset:*)').replace(/^(.*),cmd:.*/,'$1');")
;                     *setcust XC_dset:*=%so"dset",cmd:"*setcust X_bg:Path= %%: *setcust X_bg:Type=0 %%: *color back"
;                     %K"@F5"
パス背景解除(&Q)  = *ifmatch 0,0%*getcust(XC_dset:%FDN\) %: %"未登録"%I"このパスに背景画像は設定されていません" %: *stop
                    *diroption -thisbranch cmd ""
                    %K"@F5"
明度調整(&B)      = *string o,xbg=%*getcust(X_bg:B_%n)
                    *customize X_bg:B_%n=%*input("%so"xbg"" -title:"明るさ:%so"xbg" [min-max:1-100]" -mode:n)
--  =
オプション(&O)    = ?diroptionmenu
プロパティ(&R)    = %z%FVD,properties
}
;---------------------------------------------------------------------------
;**リネーム
;---------------------------------------------------------------------------
;-|M_FileRename  =
;M_FileRename = {
;&Swap!  = *script %'scr'%\renameSwap.js
;-- =
;&PPffix = *ppffix -ppc %#FDC
;}
;---------------------------------------------------------------------------
;**移動
;---------------------------------------------------------------------------
; -|M_FileMOVE  =
; M_FileMOVE  = {
; 移動(&M)          = *script %'scr'%\cmdMove.js,1
; 一つ上に移動(&U)  = *ppcfile !move,..\,-min -qstart -nocount -same:5 -log:off -compcmd %K"@PAUSE"
; ディレクトリにまとめる(&K)  = *ppcfile !move,"%FDN\%"ディレクトリ名"%{%*now(date)%}",-min -qstart -nocount -log:off
; ;;-querycreatedirectory:off
; -- =
; 詳細設定(&D)      = *script %'scr'%\cmdMove.js
; }
;---------------------------------------------------------------------------
;**コピー
;---------------------------------------------------------------------------
; -|M_FileCOPY =
; M_FileCOPY = {
; コピー(&C)              = *script %'scr'%\cmdCopy.js,1,6
; 同DIRリネームコピー(&R) = *ppcfile !Copy,"%1",-qstart -min -nocount -preventsleep -same:5 -log:off -compcmd:%%K"@^PDOWN"
; シンボリックリンク(&L)  = *script %'scr'%\cmdCopy.js,2
; -- =
; 詳細設定(&D)            = *script %'scr'%\cmdCopy.js,0,6
; }
;---------------------------------------------------------------------------
;** バイナリ閲覧
;---------------------------------------------------------------------------
-|M_bin =
M_bin = { ** comment **
&Diff     = *string o,proc=%*script(%*getcust(S_ppm#global:ppm)\lib\vbs\see_process.vbs,nvim.exe,3000,"wt -w 1 -p Neovim",3)
            *script %'scr'\launch_neovim.js,%so'proc',100,diff
            *focus #%*findwindowclass(cascadia_hosting_window_class)
; &Diff     = %ORx *string o,path=%FDCN %: *string o,pairwise=%~FDCN
            ; *if 2==%*js(PPx.Result = PPx.EntryMarkCount;) %: *string o,pairwise=%*regexp("%#;FDCN","s/.+;(.+)/$1/")
            ; *if 0%*findwindowclass("vim") %: %Obd gvim --remote-send "<cmd>tabe %so'pairwise' | vert diffsplit %so'path'<CR>" >nul %: *stop
            ; gvim -d "%so'path'" "%so'pairwise'"
&FC       = *if 2==%*js(PPx.Result = PPx.EntryMarkCount;) == 2 %: FC /b %#FDC %: *stop
            FC /b %FDC "%~FDCN"
--        =
&Hex dump = *ppv "%C" -r -hex
}
;---------------------------------------------------------------------------
;** 解凍
;---------------------------------------------------------------------------
-|M_xunpack =
M_xunpack = {
ここに解凍(&U)      = *unpack %& *POSTMARK 6
--  =
ワークスペース(&W)  = *unpack %*getcust(S_ppm#user:work) %& *POSTMARK 6
反対窓に解凍(&O)    = *ifmatch "64;96",%*js(PPx.Result = PPx.DirectoryType;) %: %u7-zip64.dll,e %FD -i%@ -aos "-o%~FDN" %: *POSTMARK 6 %: *stop
                      %u7-zip64.dll,x -aos -an -ai%@ "-o%~FDN" %: *POSTMARK 6
--  =
; 画像抽出(&P)        = %u7-zip64.dll,e -aos -an -ai%@ "-o%*RESULT(getpath)*" *.jpg *.jpeg *.bmp *.png *.gif %: *POSTMARK 6
; 音楽抽出(&M)        = %u7-zip64.dll,e -aos -an -ai%@ "-o%*RESULT(getpath)*" *.mp3 *.mid *.wav *.ogg %: *POSTMARK 6
; --  =
閲覧(&L)            = reces /mL7-zip64.dll %R | nkf -W16L -w8 | less
完全性テスト(&T)    = reces /mt7-zip64.dll %R
; 完全性テスト(&T)    = %u7-zip64.dll,t %R
}
;---------------------------------------------------------------------------
;** 圧縮
;---------------------------------------------------------------------------
-|M_xpack =
M_xpack = {
zi&p method5    = *if 1>=%*js(PPx.Result=PPx.EntryMarkCount;) %: %u7-zip64.dll,u -tzip -mx=5 -hide "%*input("%*RESULT(getpath)%|%X%|.zip" -mode:Ec -select:i)" "%FCN%S"\"" %: *POSTMARK 6 %: *stop -n
                  %u7-zip64.dll,u -tzip -mx=5 "%*input("%*RESULT(getpath)%|%X%|.zip" -mode:Ec -select:i)" %@FCB %: *POSTMARK 6
zip &NoComp     = *if 1>=%*js(PPx.Result=PPx.EntryMarkCount;) %:  %u7-zip64.dll,u -tzip -mx=0 -hide "%*input("%*RESULT(getpath)%|%~X%|.zip" -mode:Ec -select:i)" "%FCN%S"\"" %: *POSTMARK 6 %: *stop -n
                  %u7-zip64.dll,u -tzip -mx=0 -hide "%*input("%*RESULT(getpath)%|%~X%|.zip" -mode:Ec -select:i)" %@FCB %: *POSTMARK 6
&zip(PASS付き)  = %u7-zip64.dll,u -tzip -mx=5 -p -mem=AES256 -hide "%*input("%*RESULT(getpath)%|%X%|.zip" -mode:Ec -select:i)" %@FCB
-- =
&7z             = %u7-zip64.dll,u "%*input("%*RESULT(getpath)%|%X%|.7z" -mode:Ec -select:i)" %@FCB %S"-r"
&7z(PASS付き)   = %u7-zip64.dll,u -p "%*input("%*RESULT(getpath)%|%X%|.7z" -title:"パス付き書庫の名前" -mode:Ec -select:i)" %@FCB
&Cab            = %uCAB32.dll,-a -r "%*input("%*RESULT(getpath)%|%X%|.cab" -mode:Ec -select:i)" %@FCB
--  =
追加圧縮(&A)    = %"追加圧縮"%Q"確認:%bn階層内への追加は未対応です" %: %u7-zip64.dll,u %*regexp("%~FDC","s/^(.*\\.*?(7z|zip)).*/$1/") %@FCB %S"-r"
--  =
基底DIR除去(&D) = *ppb -c reces /mrzip /l0 /eb /t /of%{%FX_%} /d2 %FDCB
; 最適化圧縮(&O)  = %ORs *ifmatch %*RESULT(filetype),DIR %: %0..\Ralpha\Ralpha.exe /ini=convJPG%"連番初期値の設定 0 or 1"%{0%}.ini %FDC %: *ppb -c reces /mc /of"%*input("%*RESULT(getpath)%|%Y%|.zip" -title:"無圧縮書庫の名前" -mode:Ec -select:i)" /eb /l0 %*getcust(S_ppm#user:work)%\_%FC %: *stop
;                   *ifmatch %*RESULT(filetype),PKZIP %: *ppb -c reces /{"optPACK.cfg" %FDCB %: *stop
;                   *linemessage !"select "DIR" or "ZIP"
; RalphaCFG作成(&M)  = reces /mrzip /l0 /e /t /r"C:\bin\Ralpha\Ralpha.exe /ini=optPACK.ini ."  /}"optPACK.cfg" :
}
;---------------------------------------------------------------------------
;** PPv
;---------------------------------------------------------------------------
-|M_ppvc  =
M_ppvc  = { ; PPvコンテキスト追加分
;開く =*ppv -r %*selecttext()
;-- =
; PPcで実行   = *execute C,%*selecttext()
ファイル内検索(&W) = %k"%*selecttext()%:K"@^F"
stack &memo   = *execute %sp"targetID",%%OC *string p,stackmemo=## %*selecttext%%bn%%sp"stackmemo"
--  =
背景明度(&B)  = *string o,bri=X_bg:B_%n
                *customize %so"bri"=%*input("%*getcust(%so"bri")" -title:"明度の設定" -mode:n)
--  =
&Ecosia      = *launch %g'browser' https://www.ecosia.org/search?q=%*selecttext(u)
}
;---------------------------------------------------------------------------
;・一行編集コンテキストメニュー
;---------------------------------------------------------------------------
-|M_editcMenu  =
M_editcMenu  = {
ファイルメニュー(&F)\tCtrl+]  = %k"^']'
編集メニュー(&M)\tCtrl+Q      = %k"^Q
設定メニュー(&S)\tShift+F2    = %k"\F2
--  =
編集詳細(&@)          = %*menu(M_ppmMisc,!E)
--  =
エントリ読み込み(&R)  = *replacefile %*extract(C"%%FDC")
                        *setcaption %*extract(C"%%FC")
-- =
コミットテンプレ(&C)  = *string o,fn=%se"filename"
                        *replacefile %'list'%\git\commit_template
                        *string e,filename=%so"fn"
編集テンプレ(&E)      = *replacefile %'cfg'%\TPL_Pxx.cfg
                        *setcaption TPL_Pxx.cfg
コマンド追加(&A)      = *setcust M_editCadd:%*input(-title:"コマンド名の登録")=%*RESULT(shapecode)
                        %On *ppcust CD %'cfg'\@add_command.cfg -mask:M_editCadd
コマンド削除(&D)      = *deletecust "M_editCadd"
-- =
addCMD                = ??M_editCadd
;元の編集メニュー(&B)\tShift+F10  = *defaultmenu
;選択ファイル名\tCtrl+N   = %k"^N
;選択ファイルパス\tCtrl+P = %k"^P
;選択ファイル(拡張子無)\tCtrl+E = %k"^E
;選択ファイル拡張子\tCtrl+T = %k"^T
;カーソルファイル\tCtrl+R = %k"^R
;PPxパス\tCtrl+0    = %k"^0
;カレントパス\tCtrl+1   = %k"^1
;反対窓パス\tCtrl+2   = %k"^2
}
;-|M_editc   =
;M_editc     = { ; 一行編集コンテキストメニュー
;大文字/小文字(&W)\tCtrl+Q-U     = %k"^QU
;全角/半角(&Z)\tCtrl+K-Z         = %k"^KZ
;-- =
;反対窓カーソルファイル名(&Y)    = *insert "%~Y"
;mode                            =
;-- =
;お気に入り(&O)\tCtrl+Shift+P    = %K"^\P"
;PPcのパス(&L)\tCtrl+Shift+L     = %K"^\L"
;ディレクトリ(&D)                = %K"@^\D"
;ファイル(&I)\tCtrl+Shift+I      = %K"^\I"
;|| =
;&g 汎用           = *editmode g
;&h コマンド       = *editmode h
;&f フルパス       = *editmode f
;&d ディレクトリ   = *editmode d
;&c ファイル       = *editmode c
;&x PPv履歴        = *editmode x
;&m マスク         = *editmode m
;&e 使用しない     = *editmode e
;-- =
;&7 キーリスト     = *setcaption キーの検索
;                     *completelist /file:%0PPXUKEYS.TXT
;                     *editmode e
;&8 stash number   = *gitstring stash
;                    *insert %*extract(C%%si"git_string")
;                    *execute C,*string i,git_string=
;&9 branch name    = *gitstring branch
;                    *insert %*extract(C%%si"git_string")
;                    *execute C,*string i,git_string=
;&0 commit hash    = *gitstring commit
;                    *insert %*extract(C%%si"git_string")
;                    *execute C,*string i,git_string=
;;数値(&n)           = *editmode n
;;検索(&s)           = *editmode s
;}
;-|M_editci =
;M_editci = {
;カーソルファイル(&R)\tCtrl+R    = %k"&R
;選択ファイル名(&X)\tCtrl+E      = %k"&X
;選択ファイル拡張子(&T)\tCtrl+T  = %k"&T
;選択ファイルパス(&P)\tAlt+P     = %k"&P
;}
;-|M_editciRename =
;M_editciRename = {
;前に追加(&F)    = *replace ":%*edittext()%%C"
;                  *script %'scr'%\setSel.js,"(\:)(.*)%%C"
;後ろに追加(&B)  = *replace ":%%X%*edittext().%%T"
;                  *script %'scr'%\setSel.js,"(\:%%X)(.*)\.%%T"
;置換(&R)        = *linemessage s/対象文字/置換文字/[g][I]   ※:%%展開をOFF
;                  *replace "s/%*edittext()//"
;                  *script %'scr'%\setSel.js,"(s\/)(.*)\/\/"
;連番(&N)        = *linemessage [\]=連番マクロ
;                  *replace ":%*edittext()\.%%T"
;                  *script %'scr'%\setSel.js,"(\:)(.*)\\\.%%T"
;数字桁揃え(&S)  = *string o,digit=%*input("3" -title:"桁数" -mode:e)
;                  *replace ":%*edittext()%%*padding(%%*regexp(""""%%FXN"""",""""s/\D*(\d*)/\1/""""),%so"digit",0).%%T"
;                  *script %'scr'%\setSel.js,"(\:)(.*)%%\*padding.*"
;拡張子一括(&E)  = *replace ":%%X.%T"
;                  *script %'scr'%\setSel.js,"(.*%%X\.)(.*)"
;}
;初期値
;元に戻す(&U)\tCtrl+Z = %k"^Z
;-- = 
;切り取り(&T)\tCtrl+X = %k"^X
;コピー(&C)\tCtrl+C = %k"^C
;貼り付け(&P)\tCtrl+V = %k"^V
;削除(&D)\tDelete = %k"DEL
;-- = 
;全て選択(&A)\tCtrl+A = %k"^A
;|| = 
;元の編集メニュー(&B)\tShift+F10  = *defaultmenu
;ファイルメニュー(&F)\tCtrl+] = %k"^']'
;編集メニュー(&M)\tCtrl+Q = %k"^Q
;設定メニュー(&S)\tShift+F2 = %k"\F2
;-- = 
;大-小文字変換(&W)\tCtrl+Q-U  = %k"^QU
;全-半角変換(&Z)\tCtrl+K-Z  = %k"^KZ
;管理者として実行(&R)\tESC-R  = %k"^']' R
;|| = 
;行番号(&J)\tCtrl+Q-J = %k"^QJ
;検索(&F)\tCtrl+F = %k"^F
;-- = 
;お気に入り(&N)\tCtrl+Shift+P = %k"^\P
;PPcのパス(&L)\tCtrl+Shift+L  = %k"^\L
;ディレクトリ(&O)\tCtrl+Shift+D = %k"^\D
;ファイル(&G)\tCtrl+Shift+I = %k"^\I
;パス挿入(&I) = %M_editci
