{
  "Template": {
    "prefix": "temp",
    "body": [
      "/* @file $1",
      " * @author tar80 <tar80master@google.com>",
      " * @license MIT",
      " * @arg $2",
      " */",
      "\n'use strict';\n${0}"
    ]
  },
  "Import": {
    "prefix": "imp",
    "body": "import ${1} from '${2:@ppmdev/modules/}';"
  },
  "Args": {
    "prefix": "ar",
    "body": [
      "const adjustArgs = (args = PPx.Arguments): object => {",
      "\tconst arr: string[] = [$1];",
      "\n\tfor (let i = 0, l = args.length; i < l; i++) {",
      "\t\tarr[i] = args(i);",
      "\t}",
      "\n\treturn {$2};",
      "};$0"
    ]
  },
  "Comment": {
    "prefix": "come",
    "body": "/**\n * $1\n */"
  },
  "FileSystemObject": {
    "prefix": "fso",
    "body": "const fso = PPx.CreateObject('Scripting.FileSystemObject');\n$0"
  },
  "Object inline": {
    "prefix": "obji",
    "body": "'$1': '$2',\n$0"
  },
  "Object arrow function": {
    "prefix": "objaf",
    "body": "$1('$2') $3,\n$0"
  },
  "Object function": {
    "prefix": "objf",
    "body": "'$1': function ('$2') {$3},\n$0"
  },
  "If": {
    "prefix": "if",
    "body": "if ($1) {\n\t$2\n}$3\n$0"
  },
  "For loop": {
    "prefix": "for",
    "body": ["for (let ${1:i} = ${2:0}; ${1:i} < ${3:l}; ${1:i}++) {", "\t$4", "}", "\n$0"]
  },
  "For loop limit": {
    "prefix": "forl",
    "body": [
      "for (let ${1:i} = ${2:0}, ${3:l} = ${4:array}.length; ${1:i} < ${3}; ${1:i}++) {",
      "\tconst ${5:element} = ${4:array}[${1:i}];",
      "\t$0",
      "}"
    ]
  },
  "For of": {
    "prefix": "forof",
    "body": "for (const ${1:item} of ${1}s${2}) {\n\t$0\n}"
  },
  "Arrow function": {
    "prefix": "af",
    "body": "($1): $2 => $0"
  },
  "Anonymous arrow function": {
    "prefix": "afn",
    "body": "(($1: $2): $3 => $0)()"
  },
  "Function": {
    "prefix": "func",
    "body": "function ($1) {$2}"
  },
  "Anonymous function": {
    "prefix": "funcn",
    "body": "(function ($1) {$2})()"
  },
  "Do loop": {
    "prefix": "do",
    "body": "do{\n\t$1\n} while($0);"
  },
  "ppm.execute": {
    "prefix": "ppme",
    "body": "ppm.execute('${1:.}', '$2')$0"
  },
  "ppm.extract": {
    "prefix": "ppmt",
    "body": "ppm.extract('${1:.}', '$2')$0"
  },
  "Type annotation": {
    "prefix": "tya",
    "body": "/** @${1:deprecated} */$0"
  },
  "Ts ignore": {
    "prefix": "tsi",
    "body": "// @ts-ignore"
  },
  "Jest describe": {
    "prefix": "desc",
    "body": ["describe('$1', function () {", "\t$2", "});"]
  },
  "Jest it": {
    "prefix": "it",
    "body": ["it('$1', () => {", "\t$2", "});"]
  },
  "Jest expect": {
    "prefix": "exp",
    "body": ["expect(${1}).${2}"]
  }
}
